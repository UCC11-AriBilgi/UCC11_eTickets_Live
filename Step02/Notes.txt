Step01 - Configurations/Models 17.5

	+1. Step01 isimli bir proje oluşturalım.

	+2. Proje adım adım ilerleme şeklinde yapılacağı için (Step01,Step02,Step03,...) ayarı ayrı ama birbirini takip edecek ve derleme sonrası tek bir Assembly dosyası olabilmesi için gerekli bazı düzenlemeleri yapalım
		Project/Properties kısmından yapılacak
			AssemblyName ve Default NameSpaces deki tanımları -> eTickets

	+3. Arka planda bir VT olacağı için gerekli NuGet paketlerinin yüklenmesi (EF için)
		. Microsoft.EntityFrameworkCore (VT <-> Code arası Tercüman)
		. Microsoft.EntityFrameworkCore.SqlServer (SqlServer işlemleri için)
		. Microsoft.EntityFrameworkCore.Design (Model tasarımlarının VT tarafında aktarılması için)
		. Microsoft.EntityFrameworkCore.Tools (Yardımcı komutların bulunduğu)

	+4. VT mizde olacak olan tabloların yani code tarafındaki Modellerin (class) oluşturulması. (\Models)
		. Actor.cs
		. Producer.cs
		. Cinema.cs
		. Movie.cs
			Movie bilgilerimde category türünü gösterek bir alanımız olacak. Bunun tanımlarını ayrı bir class yapısı içinde tutalım(Enum yapısı). Bu tür tanımların da bulunduğu ayrı bir klasör yaratalım (\Data)

	-4.1 Class Diagram 

	+5. Model İlişkilendirmeleri (Relations)
		
		. Cinema <-->> Movie (bir Cinemada bir kaç Movie oynayabilir)

		. Producer <-->> Movie (bir Producer bir kaç Movie yaratmış/yönetmiş olabilir)

		. Birçok Actor bir çok Movie de oynayabilir (many-to-many ilişki). Bundan dolayı Actor ile Movie class ları arasındaki böyle bir ilişkiyi tanımlayabilmek için ara bir modelden faydalanacağız (Actor_Movie.cs - Junction yapısı).
			Movie <-->> Actor_Movie (bir Movie de bir çok Actor olabilir)
			Actor <-->> Actor_Movie (bir Actor bir çok Movie de oynayabilir)

		5.1 Modellerimiz üzerinde ilişkilendirmelerin tanımlanması
			
			. Producer.cs --> Relations

			. Cinema.cs --> Relations

			. Actor.cs --> Relations

			. Movies.cs --> Relations

	+6. Uygulamanın DbContext yapısının eklenmesi (Db-Code tercuman)
		. \Data\AppDbContext.cs.. ileryeyen adımlarda düzenleyeceğiz.

	+7. Uygulamanın ana giriş noktası olan Program.cs classında bu DbContext yapısı tanımlayalım. İlerleyen adımlarda düzenleyeceğiz.

	+8. AppDbContext.cs deki düzenlemeler.
		Bu sınıf yaratılırken modellerimizin birbirine bağlanması, model yapı ve tanımlarının VT tarafındaki tablo karşılıklarının tanımlanması işlemleri. ??? Actor_Movie ??

		Artık modellerimin VT tarafındaki karşılıkları olacak DbSet tanımlarının yapılması.

	+9. VT ye bağlantı ve işlemler için bana bir ConnectionString gerekli.Bu ConnStr bilgisinin pek ortalarda gözükmesi pek istenmez. Bu yüzden daha gizli olan bir dosya var.(appsettings.json) ConnStr buraya yazılması daha doğru bir yol.

	+10. Program.cs altında daha önceden belirtimini yapmış olduğumuz AddDbContext kısmında bu config değerlerini okuyacak öğrenecek gerekli düzenleme

	+11. Şimdi sıra benim DB yapımı ortaya(c# ca) çıkarmaya
		Nuget PM console altında
			PM>add-migration 01_Initial

	+12. İşlem başarılı ise Migration isimli dizinin altında ilgili VT yapısının kodsal halini gösteren bir sınıf oluşuyor(Bunu kendi kullanıyor). Not: Daha henüz VT oluşmadı.

	+13. VT nin yaratılabilmesi için PM Console dan
		PM> update-database komutu çalıştırılır. VT boş olarak yaratılmış olur.

	+14. Şu an VT yapı olarak oluştu . Ama içinde herhangi bir veri yok. Kod tarafından fake/dummy data yaratacak şekilde bazı düzenlemeler yapalım.
		Data dizini altında AppDbInitializer.cs isminde bir class tanımlayalım
		ve içine VT tarafındaki tablolarda bulunacak dummy verileri kodlayalım.

	+15. Program.cs(uygulamanın ana giriş noktası) altına bu veri yaratma kısmını ekleyelim. Ve çalıştıralım.

--------------------------------------------------------------------------------------
Step02 - Controller/View 22.5

	Not : 
		. Solution içinde Step02 isimli yeni proje açalım.
		. Step01 içindeki yapılanları bu projeye kopyalayalım.	(Controller,Data,Migrations,Models,ProjectItems,Views,appsettings.json,Program.cs)
		. Projenin tümünün uyumlu olabilmesi için gerekli Namespace,Assembly ayarlamaları(eTickets)
		. EF kullanıldığı için bu paketleri yükleyelim. Copy sırasında gelmiyor o yüzden

	16. Controllerların oluşturulması
		(Herbir controller VT ile ilişkili olacağından context yapısını controller üzerine tanımlayalım.(injecting)
		ActorsController
		ProducersController
		CinemasController
		MoviesController
